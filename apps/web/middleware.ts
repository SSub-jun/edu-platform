import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';

// Î≥¥Ìò∏Îêú ÎùºÏö∞Ìä∏ Ìå®ÌÑ¥
const protectedRoutes = [
  '/dashboard',
  '/student',
  '/instructor', 
  '/admin',
  '/exam',
  '/qna',
  '/curriculum',
  '/lesson',
];

// Í≥µÍ∞ú ÎùºÏö∞Ìä∏ Ìå®ÌÑ¥  
const publicRoutes = [
  '/login',
  '/signup',
  '/company-assign', // ÌöåÏÇ¨ ÏΩîÎìú ÏûÖÎ†• ÌéòÏù¥ÏßÄ
];

// ÌöåÏÇ¨ Î∞∞Ï†ïÏù¥ ÌïÑÏöîÌïú ÎùºÏö∞Ìä∏ (ÌïôÏÉùÎßå, Í∞ïÏÇ¨/Í¥ÄÎ¶¨ÏûêÎäî Ï†úÏô∏)
const companyRequiredRoutes = [
  '/curriculum',
  '/lesson', 
  '/exam',
  // '/qna'Îäî Ï†úÍ±∞ - Í∞ïÏÇ¨ÎèÑ Ï†ëÍ∑º Í∞ÄÎä•Ìï¥Ïïº Ìï®
];

export function middleware(request: NextRequest) {
  const { pathname } = request.nextUrl;
  const userAgent = request.headers.get('user-agent') || '';
  const timestamp = new Date().toISOString();

  // Î≥¥Ìò∏Îêú ÎùºÏö∞Ìä∏Ïù∏ÏßÄ ÌôïÏù∏ (Î£®Ìä∏ Í≤ΩÎ°úÎäî Î≥ÑÎèÑ Ï≤òÎ¶¨)
  const isProtectedRoute = pathname !== '/' && protectedRoutes.some(route => 
    pathname.startsWith(route)
  );

  // Í≥µÍ∞ú ÎùºÏö∞Ìä∏Ïù∏ÏßÄ ÌôïÏù∏
  const isPublicRoute = publicRoutes.some(route => 
    pathname === route
  );

  // ÌÜ†ÌÅ∞ ÌôïÏù∏ (ÏÑúÎ≤Ñ ÎØ∏Îì§Ïõ®Ïñ¥Îäî Ïø†ÌÇ§Îßå ÌôïÏù∏)
  const authCookie = request.cookies.get('ap-auth');
  const hasValidToken = authCookie && authCookie.value && authCookie.value !== 'none';
  const tokenValue = authCookie?.value || 'none';
  const allCookies = request.cookies.toString();

  // ÌÜ†ÌÅ∞ÏóêÏÑú role Ï∂îÏ∂ú (Í∞ïÏÇ¨/Í¥ÄÎ¶¨Ïûê Ï≤¥ÌÅ¨Ïö©)
  let userRole = 'student'; // Í∏∞Î≥∏Í∞í
  if (hasValidToken && tokenValue !== 'none') {
    try {
      const payload = JSON.parse(atob(tokenValue.split('.')[1]));
      userRole = payload.role || 'student';
    } catch (e) {
      // ÌÜ†ÌÅ∞ ÌååÏã± Ïã§Ìå® Ïãú Í∏∞Î≥∏Í∞í Ïú†ÏßÄ
      userRole = 'student';
    }
  }

  // ÎîîÎ≤ÑÍπÖ Î°úÍ∑∏ (Í∞úÎ∞ú ÌôòÍ≤ΩÏóêÏÑúÎßå) - Ìï≠ÏÉÅ Ï∂úÎ†•ÌïòÎèÑÎ°ù ÏàòÏ†ï
  console.log(`\nüîç [MIDDLEWARE] ${timestamp}`);
  console.log(`  PATH: ${pathname}`);
  console.log(`  IS_PROTECTED: ${isProtectedRoute}`);
  console.log(`  IS_PUBLIC: ${isPublicRoute}`);
  console.log(`  HAS_TOKEN: ${hasValidToken}`);
  console.log(`  USER_ROLE: ${userRole}`);
  console.log(`  TOKEN_PREVIEW: ${tokenValue.substring(0, 30)}...`);
  console.log(`  ALL_COOKIES: ${allCookies}`);
  console.log(`  USER_AGENT: ${userAgent.includes('Mozilla') ? 'Browser' : 'Other'}`);

  // Î£®Ìä∏ Í≤ΩÎ°ú ÌäπÎ≥Ñ Ï≤òÎ¶¨ - roleÏóê Îî∞Îùº Îã§Î•∏ ÌéòÏù¥ÏßÄÎ°ú Î¶¨Îã§Ïù¥Î†âÌä∏
  if (pathname === '/') {
    if (hasValidToken) {
      let redirectPath = '/curriculum'; // Í∏∞Î≥∏Í∞í (ÌïôÏÉùÏö©)
      
      if (userRole === 'instructor') {
        redirectPath = '/instructor';
      } else if (userRole === 'admin') {
        redirectPath = '/admin';
      }
      
      console.log(`\nüöÄ [MIDDLEWARE REDIRECT] ${pathname} -> ${redirectPath}`);
      console.log(`  ‚úÖ REASON: Root path with valid token (role: ${userRole})`);
      console.log(`  üîó Redirecting to: ${redirectPath}\n`);
      return NextResponse.redirect(new URL(redirectPath, request.url));
    } else {
      console.log(`\nüö® [MIDDLEWARE REDIRECT] ${pathname} -> /login`);
      console.log(`  ‚ùå REASON: Root path without valid token`);
      console.log(`  üîó Redirecting to: /login\n`);
      return NextResponse.redirect(new URL('/login', request.url));
    }
  }

  // Î°úÍ∑∏Ïù∏ ÌéòÏù¥ÏßÄ Ï≤òÎ¶¨ - ÌÜ†ÌÅ∞Ïù¥ ÏûàÏúºÎ©¥ roleÏóê Îî∞Îùº Î¶¨Îã§Ïù¥Î†âÌä∏
  if (pathname === '/login') {
    if (hasValidToken) {
      let redirectPath = '/curriculum'; // Í∏∞Î≥∏Í∞í (ÌïôÏÉùÏö©)
      
      if (userRole === 'instructor') {
        redirectPath = '/instructor';
      } else if (userRole === 'admin') {
        redirectPath = '/admin';
      }
      
      console.log(`\nüöÄ [MIDDLEWARE REDIRECT] ${pathname} -> ${redirectPath}`);
      console.log(`  ‚úÖ REASON: Login page with valid token (role: ${userRole})`);
      console.log(`  üîó Redirecting to: ${redirectPath}\n`);
      return NextResponse.redirect(new URL(redirectPath, request.url));
    } else {
      console.log(`[MIDDLEWARE] Login page access allowed (no token)`);
      return NextResponse.next();
    }
  }

  // Î≥¥Ìò∏Îêú ÎùºÏö∞Ìä∏Ïóê Ï†ëÍ∑ºÌïòÎ†§ÎäîÎç∞ ÌÜ†ÌÅ∞Ïù¥ ÏóÜÎäî Í≤ΩÏö∞
  if (isProtectedRoute && !hasValidToken) {
    // Î°úÍ∑∏Ïù∏ ÌéòÏù¥ÏßÄÎ°ú Î¶¨Îã§Ïù¥Î†âÌä∏Ìï† ÎïåÎäî redirect ÌååÎùºÎØ∏ÌÑ∞ Ï∂îÍ∞Ä
    const loginUrl = new URL('/login', request.url);
    loginUrl.searchParams.set('redirect', pathname);
    
    console.log(`\nüö® [MIDDLEWARE REDIRECT] ${pathname} -> /login?redirect=${pathname}`);
    console.log(`  ‚ùå REASON: Protected route without valid token`);
    console.log(`  üìã DETAILS:`);
    console.log(`    - Protected: ${isProtectedRoute}`);
    console.log(`    - Has Token: ${hasValidToken}`);
    console.log(`    - Cookie Count: ${request.cookies.size}`);
    console.log(`  üîó Redirecting to: ${loginUrl.toString()}\n`);
    
    return NextResponse.redirect(loginUrl);
  }

  return NextResponse.next();
}

export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - api (API routes)
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     */
    '/((?!api|_next/static|_next/image|favicon.ico).*)',
  ],
};
